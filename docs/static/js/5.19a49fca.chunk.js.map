{"version":3,"sources":["hooks/use-playground/use-playgroundSliders.js","hooks/use-playground/use-playgroundSliders.module.css","global.module.css","hooks/use-canvas/use-canvas.js","hooks/use-canvas/use-canvas.module.css","pages/Projects/GenerativeArt/Wave/Wave.js"],"names":["valRngStateReducer","state","action","type","updateObj","id","value","val","usePlaygroundSliders","initialState","playgroundName","disableControls","useReducer","valRng","dispatchValRng","useState","animationToggler","setAnimationToggler","stopped","setStopped","slidersArr","slider","push","config","rngSliders","map","elementType","inputType","label","disabled","min","max","step","changed","event","target","onInputChange","playgroundUI","className","classes","RngValSliders","PlaygroundName","btnType","clicked","prevState","module","exports","INIT_STATE","canvas","ctx","size","height","width","canvasReducer","useCanvas","ready","canvasRef","useRef","canvState","dispatchCanvas","useEffect","current","getContext","timeout","resizeHandler","clearTimeout","setTimeout","getBoundingClientRect","window","addEventListener","removeEventListener","canvasEl","ref","Canvas","Wave","setReady","usePlayground","length","amplitude","frequency","color","initFrequency","useLayoutEffect","animationFrameId","animate","beginPath","moveTo","strokeStyle","i","lineTo","Math","sin","stroke","fillRect","fillStyle","draw","requestAnimationFrame","cancelAnimationFrame","gClasses","Playground"],"mappings":"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","file":"static/js/5.19a49fca.chunk.js","sourcesContent":["import { useReducer, useState } from \"react\";\r\n\r\nimport { updateObj } from \"../../usefulFunc/utility\";\r\n\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\n\r\nimport classes from \"./use-playgroundSliders.module.css\";\r\n\r\nconst valRngStateReducer = (state, action) => {\r\n  if (action.type === \"UPDATE_INPUT_VALUE\")\r\n    return updateObj(state, {\r\n      [action.id]: {\r\n        ...state[action.id],\r\n        value: action.val,\r\n      },\r\n    });\r\n  else return state;\r\n};\r\n\r\nconst usePlaygroundSliders = (initialState, playgroundName, disableControls) => {\r\n  const [valRng, dispatchValRng] = useReducer(valRngStateReducer, initialState);\r\n\r\n  const [animationToggler, setAnimationToggler] = useState(false);\r\n  \r\n  const [stopped, setStopped] = useState(false);\r\n  \r\n\r\n  const onInputChange = (event, id) =>\r\n    dispatchValRng({\r\n      type: \"UPDATE_INPUT_VALUE\",\r\n      val: event.target.value,\r\n      id: id,\r\n    });\r\n\r\n    const onClickHandler = () => {\r\n      if(animationToggler) setStopped(true);\r\n      setAnimationToggler((prevState) => !prevState);\r\n    }\r\n\r\n  const slidersArr = [];\r\n  for (let slider in valRng) {\r\n    slidersArr.push({\r\n      id: slider,\r\n      config: valRng[slider],\r\n    });\r\n  }\r\n\r\n  const rngSliders = slidersArr.map((slider) => (\r\n    <Input\r\n      key={slider.id}\r\n      elementType={slider.config.elementType}\r\n      inputType={slider.config.inputType}\r\n      label={slider.id}\r\n      value={slider.config.value}\r\n      disabled={animationToggler && disableControls}\r\n      min={slider.config.min}\r\n      max={slider.config.max}\r\n      step={slider.config.step}\r\n      changed={(event) => onInputChange(event, slider.id)}\r\n    />\r\n  ));\r\n\r\n  const playgroundUI = (\r\n      <section className={classes.RngValSliders}>\r\n        <h1 className={classes.PlaygroundName}>{playgroundName}</h1>\r\n        {rngSliders}\r\n        <Button\r\n          btnType=\"Success\"\r\n          clicked={onClickHandler}\r\n        >\r\n          {animationToggler ? \"Stop!\" : \"Try it!\"}\r\n        </Button>\r\n      </section>\r\n  );\r\n\r\n  return {\r\n    playgroundUI,\r\n    valRng,\r\n    animationToggler,\r\n    setAnimationToggler,\r\n    stopped,\r\n    setStopped\r\n  };\r\n};\r\n\r\nexport default usePlaygroundSliders;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RngValSliders\":\"use-playgroundSliders_RngValSliders__3wfmL\",\"PlaygroundName\":\"use-playgroundSliders_PlaygroundName__2VGYk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Playground\":\"global_Playground__2p6A0\"};","import { useRef, useReducer, useEffect } from \"react\";\r\n\r\nimport { updateObj } from \"../../usefulFunc/utility\";\r\n\r\nimport classes from \"./use-canvas.module.css\";\r\n\r\nconst INIT_STATE = {\r\n  canvas: null,\r\n  ctx: null,\r\n  size: {\r\n    height: null,\r\n    width: null,\r\n  },\r\n};\r\n\r\nconst canvasReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"INIT_CANVAS\":\r\n      return updateObj(state, {\r\n        canvas: action.value,\r\n      });\r\n\r\n    case \"INIT_CTX\":\r\n      return updateObj(state, {\r\n        ctx: action.value,\r\n      });\r\n\r\n    case \"SET_SIZE\":\r\n      return updateObj(state, {\r\n        size: {\r\n          height: action.height,\r\n          width: action.width,\r\n        },\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst useCanvas = (ready) => {\r\n  const canvasRef = useRef();\r\n\r\n  const [canvState, dispatchCanvas] = useReducer(canvasReducer, INIT_STATE);\r\n\r\n  useEffect(() => {\r\n    if (!ready) return;\r\n    dispatchCanvas({ type: \"INIT_CANVAS\", value: canvasRef.current });\r\n  }, [ready]);\r\n\r\n  useEffect(() => {\r\n    if (!canvState.canvas) return;\r\n    dispatchCanvas({ type: \"INIT_CTX\", value: canvState.canvas.getContext(\"2d\")});\r\n  }, [canvState.canvas])\r\n\r\n  const {canvas} = canvState;\r\n\r\n  useEffect(() => {\r\n    if(!canvas) return\r\n    let timeout;\r\n\r\n    const resizeHandler = () => {\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(() => {\r\n        dispatchCanvas({\r\n          type: \"SET_SIZE\",\r\n          height: canvas.getBoundingClientRect().height,\r\n          width: canvas.getBoundingClientRect().width,\r\n        });\r\n        canvas.height = canvas.getBoundingClientRect().height;\r\n        canvas.width = canvas.getBoundingClientRect().width;\r\n      }, 500);\r\n    };\r\n\r\n    resizeHandler();\r\n\r\n    window.addEventListener(\"resize\", resizeHandler);\r\n\r\n    // if (animationToggler) {\r\n    //     dispatchCanvas({\r\n    //         type: \"SET_SIZE\",\r\n    //         height: canvas.getBoundingClientRect().height,\r\n    //         width: canvas.getBoundingClientRect().width,\r\n    //       });\r\n    //   canvas.height = canvas.getBoundingClientRect().height;\r\n    //   canvas.width = canvas.getBoundingClientRect().width;\r\n    // }\r\n\r\n    return () => {\r\n      clearTimeout(timeout);\r\n      window.removeEventListener(\"resize\", resizeHandler);\r\n    };\r\n  }, [canvas]);\r\n\r\n\r\n  const canvasEl = <canvas ref={canvasRef} className={classes.Canvas} />;\r\n\r\n  return {\r\n      canvasEl,\r\n      ...canvState\r\n  };\r\n};\r\n\r\nexport default useCanvas;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Canvas\":\"use-canvas_Canvas__1jTf-\"};","import { useEffect, useLayoutEffect, useState } from \"react\";\r\n\r\nimport useCanvas from '../../../../hooks/use-canvas/use-canvas';\r\nimport usePlayground from \"../../../../hooks/use-playground/use-playgroundSliders\";\r\n\r\nimport gClasses from '../../../../global.module.css';\r\n\r\nconst Wave = () => {\r\n    const [ready, setReady] = useState(false);\r\n\r\n    const {canvasEl, ctx, size} = useCanvas(ready);\r\n\r\n  const { playgroundUI, valRng, animationToggler} = usePlayground({\r\n    length: {\r\n      elementType: \"input\",\r\n      inputType: \"range\",\r\n      value: \"0.01\",\r\n      min: \"0.0001\",\r\n      max: \"0.2\",\r\n      step: \"0.001\",\r\n    },\r\n    amplitude: {\r\n      elementType: \"input\",\r\n      inputType: \"range\",\r\n      value: \"100\",\r\n      min: \"50\",\r\n      max: \"150\",\r\n      step: \"1\",\r\n    },\r\n    frequency: {\r\n      elementType: \"input\",\r\n      inputType: \"range\",\r\n      value: \"0.1\",\r\n      min: \"0.01\",\r\n      max: \"0.2\",\r\n      step: \"0.01\",\r\n    },\r\n    color: {\r\n      elementType: \"input\",\r\n      inputType: \"range\",\r\n      value: \"0\",\r\n      min: \"0\",\r\n      max: \"360\",\r\n      step: \"10\",\r\n    },\r\n  }, \"Wave\", false);\r\n\r\n  useEffect(() => {\r\n    setReady(true);\r\n  }, []);\r\n\r\n  let initFrequency = 0.1;\r\n\r\n  let {length: {value: length}, amplitude: {value: amplitude}, frequency: {value: frequency}, color: {value: color}} = valRng\r\n  \r\n  const draw = () => {\r\n    ctx.beginPath();\r\n    ctx.moveTo(0, size.height/2);\r\n    ctx.strokeStyle = `hsl(${color}, 50%, 50%)`;\r\n\r\n\r\n    for(let i = 0; i < size.width; i++) {\r\n        ctx.lineTo(i, size.height/2 + Math.sin(i * 0.0025/length + initFrequency) * amplitude * Math.sin(initFrequency));\r\n    }\r\n\r\n    ctx.stroke();\r\n\r\n    initFrequency += +frequency;\r\n    ctx.fillRect(0,0,size.width,size.height);\r\n    ctx.fillStyle = 'rgba(0,0,0,0.05';\r\n  }\r\n\r\n    useLayoutEffect(() => {\r\n\r\n        let animationFrameId = null;\r\n\r\n        function animate() {\r\n            draw();\r\n            animationFrameId = requestAnimationFrame(animate);\r\n        }\r\n        if(animationToggler) animate();\r\n\r\n        return () => {\r\n            window.cancelAnimationFrame(animationFrameId);\r\n        }\r\n    }, [animationToggler, valRng]);\r\n    return (\r\n    <section className={gClasses.Playground}>\r\n      {playgroundUI}\r\n      {canvasEl}\r\n    </section>\r\n    )\r\n      \r\n    \r\n}\r\n\r\nexport default Wave;"],"sourceRoot":""}