{"version":3,"sources":["pages/Projects/GenerativeArt/FibonacciFlower/FibonacciFlower.module.css","pages/Projects/GenerativeArt/FibonacciFlower/FibonacciFlower.js"],"names":["module","exports","valRngStateReducer","state","action","type","updateObj","id","value","val","FibonacciFlower","props","canv","useRef","useState","animationToggler","setAnimationToggler","useReducer","angle","elementType","inputType","min","max","step","space","color","radius","valRng","dispatchValRng","initAngle","initSpace","useLayoutEffect","console","log","timeout","canvas","current","ctx","getContext","resizeHandler","clearTimeout","setTimeout","height","getBoundingClientRect","width","window","addEventListener","animationFrameId","animate","col","ang","spa","rad","x","Math","sin","y","cos","beginPath","fillStyle","arc","PI","fill","closePath","draw","requestAnimationFrame","cancelAnimationFrame","removeEventListener","slidersArr","slider","push","config","displayedSliders","map","label","disabled","changed","event","target","onInputChange","Fragment","className","classes","Canvas","ref","RngValSliders","btnType","clicked","prevState"],"mappings":"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","file":"static/js/4.362011e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Canvas\":\"FibonacciFlower_Canvas__2D0SM\",\"RngValSliders\":\"FibonacciFlower_RngValSliders__3cU8y\"};","import React, {useLayoutEffect, useReducer, useRef, useState} from 'react';\r\n\r\nimport Input from '../../../../components/UI/Input/Input';\r\nimport Button from '../../../../components/UI/Button/Button';\r\n\r\nimport {updateObj} from '../../../../usefulFunc/utility';\r\n\r\nimport classes from './FibonacciFlower.module.css';\r\n\r\n\r\nconst valRngStateReducer = (state, action) => {\r\n    if(action.type === 'UPDATE_INPUT_VALUE') return updateObj(state, {\r\n        [action.id]: {\r\n            ...state[action.id],\r\n            value: action.val\r\n        }\r\n    })\r\n    else return state;\r\n}\r\n\r\nconst FibonacciFlower = props => {\r\n    const canv = useRef();\r\n\r\n    const [animationToggler, setAnimationToggler] = useState(false);\r\n\r\n    const [valRng, dispatchValRng] = useReducer(valRngStateReducer, {\r\n        angle: {\r\n            elementType: 'input',\r\n            inputType: 'range',\r\n            value: '0.5',\r\n            min: '0.1',\r\n            max: '10',\r\n            step: '0.1'\r\n        },\r\n        space: {\r\n            elementType: 'input',\r\n            inputType: 'range',\r\n            value: '0.5',\r\n            min: '0.1',\r\n            max: '10',\r\n            step: '0.1'\r\n        },\r\n        color: {\r\n            elementType: 'input',\r\n            inputType: 'range',\r\n            value: '260',\r\n            min: '0',\r\n            max: '360',\r\n            step: '10'\r\n        },\r\n        radius: {\r\n            elementType: 'input',\r\n            inputType: 'range',\r\n            value: '8',\r\n            min: '1',\r\n            max: '50',\r\n            step: '1'\r\n        }\r\n    });\r\n\r\n    const onInputChange = (event, id) => dispatchValRng({type: 'UPDATE_INPUT_VALUE', val: event.target.value, id: id});\r\n\r\n    let initAngle = 2;\r\n    let initSpace = 1;\r\n\r\n    function draw(ctx, canvas, col, ang, spa, rad) {\r\n        const x = canvas.width / 2 + Math.sin(initAngle) * initSpace;\r\n        const y = canvas.height / 2 + Math.cos(initAngle) * initSpace;\r\n\r\n        ctx.beginPath();\r\n        ctx.fillStyle = `hsl(${col}, 50%, 50%)`;\r\n        ctx.arc(x, y, rad, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        ctx.closePath();\r\n        initAngle += +ang;\r\n        initSpace += +spa;\r\n\r\n        return {x, y}\r\n    }\r\n\r\n    const onInit = () => {\r\n        initSpace = 1;\r\n        initAngle = 2;\r\n        setAnimationToggler(prevState => !prevState);\r\n    }\r\n\r\n    const {color: {value: color}, angle: {value: angle}, space: {value: space}, radius: {value: radius}} = valRng;\r\n\r\n    useLayoutEffect(() => {\r\n        console.log(`animation toggler: ${animationToggler}`);\r\n        const canvas = canv.current;\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        let timeout;\r\n\r\n        const resizeHandler = () => {\r\n            clearTimeout(timeout);\r\n            timeout = setTimeout(() => {\r\n                canvas.height = canvas.getBoundingClientRect().height;\r\n                canvas.width = canvas.getBoundingClientRect().width;\r\n            }, 500);\r\n        }\r\n\r\n        window.addEventListener('resize', resizeHandler);\r\n\r\n        if(animationToggler) {\r\n            canvas.height = canvas.getBoundingClientRect().height;\r\n            canvas.width = canvas.getBoundingClientRect().width;\r\n        }\r\n\r\n        let animationFrameId = 0;\r\n\r\n        const animate = () => {\r\n\r\n            const {x, y} = draw(ctx, canvas, color, angle, space, radius);\r\n            if((y - radius < 0 || y + radius > canvas.getBoundingClientRect().height) && (x - radius < 0 || x + radius > canvas.getBoundingClientRect().width)) {\r\n                setAnimationToggler(false);\r\n                return;\r\n            }\r\n\r\n            animationFrameId = requestAnimationFrame(animate);\r\n        }\r\n\r\n        if(animationToggler) animate();\r\n\r\n        return () => {\r\n            window.cancelAnimationFrame(animationFrameId);\r\n            clearTimeout(timeout);\r\n            window.removeEventListener('resize', resizeHandler);\r\n        }\r\n\r\n    }, [animationToggler, color, angle, space, radius]);\r\n\r\n    const slidersArr = [];\r\n    for(let slider in valRng) {\r\n        slidersArr.push({\r\n            id: slider,\r\n            config: valRng[slider]\r\n        });\r\n    }\r\n\r\n    const displayedSliders = slidersArr.map(\r\n        slider =>\r\n        <Input\r\n            key={slider.id}\r\n            elementType={slider.config.elementType}\r\n            inputType={slider.config.inputType}\r\n            label={slider.id}\r\n            value={slider.config.value}\r\n            disabled={animationToggler}\r\n            min={slider.config.min}\r\n            max={slider.config.max}\r\n            step={slider.config.step}\r\n            changed={(event) => onInputChange(event, slider.id)} />\r\n    )\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <canvas className={classes.Canvas} ref={canv} />\r\n            <div className={classes.RngValSliders}>\r\n            {displayedSliders}\r\n            <Button btnType=\"Success\" clicked={onInit}>{animationToggler ? 'Stop!' : 'Try it!'}</Button>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default FibonacciFlower;"],"sourceRoot":""}