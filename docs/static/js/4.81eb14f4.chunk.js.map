{"version":3,"sources":["hooks/use-playground/use-playgroundSliders.js","hooks/use-playground/use-playgroundSliders.module.css","global.module.css","hooks/use-canvas/use-canvas.js","hooks/use-canvas/use-canvas.module.css","pages/Projects/GenerativeArt/FibonacciFlower/FibonacciFlower.js"],"names":["valRngStateReducer","state","action","type","updateObj","id","value","val","usePlaygroundSliders","initialState","playgroundName","disableControls","useReducer","valRng","dispatchValRng","useState","animationToggler","setAnimationToggler","stopped","setStopped","slidersArr","slider","push","config","rngSliders","map","elementType","inputType","label","disabled","min","max","step","changed","event","target","onInputChange","playgroundUI","className","classes","RngValSliders","PlaygroundName","btnType","clicked","prevState","module","exports","INIT_STATE","canvas","ctx","size","height","width","canvasReducer","useCanvas","ready","canvasRef","useRef","canvState","dispatchCanvas","useEffect","current","getContext","timeout","resizeHandler","clearTimeout","setTimeout","getBoundingClientRect","window","addEventListener","removeEventListener","canvasEl","ref","Canvas","FibonacciFlower","setReady","angle","space","color","radius","initAngle","initSpace","onResetAnimationHandler","clearRect","useLayoutEffect","animationFrameId","animate","col","ang","spa","rad","x","Math","sin","y","cos","beginPath","fillStyle","arc","PI","fill","closePath","draw","requestAnimationFrame","cancelAnimationFrame","gClasses","Playground"],"mappings":"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","file":"static/js/4.81eb14f4.chunk.js","sourcesContent":["import { useReducer, useState } from \"react\";\r\n\r\nimport { updateObj } from \"../../usefulFunc/utility\";\r\n\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\n\r\nimport classes from \"./use-playgroundSliders.module.css\";\r\n\r\nconst valRngStateReducer = (state, action) => {\r\n  if (action.type === \"UPDATE_INPUT_VALUE\")\r\n    return updateObj(state, {\r\n      [action.id]: {\r\n        ...state[action.id],\r\n        value: action.val,\r\n      },\r\n    });\r\n  else return state;\r\n};\r\n\r\nconst usePlaygroundSliders = (initialState, playgroundName, disableControls) => {\r\n  const [valRng, dispatchValRng] = useReducer(valRngStateReducer, initialState);\r\n\r\n  const [animationToggler, setAnimationToggler] = useState(false);\r\n  \r\n  const [stopped, setStopped] = useState(false);\r\n  \r\n\r\n  const onInputChange = (event, id) =>\r\n    dispatchValRng({\r\n      type: \"UPDATE_INPUT_VALUE\",\r\n      val: event.target.value,\r\n      id: id,\r\n    });\r\n\r\n    const onClickHandler = () => {\r\n      if(animationToggler) setStopped(true);\r\n      setAnimationToggler((prevState) => !prevState);\r\n    }\r\n\r\n  const slidersArr = [];\r\n  for (let slider in valRng) {\r\n    slidersArr.push({\r\n      id: slider,\r\n      config: valRng[slider],\r\n    });\r\n  }\r\n\r\n  const rngSliders = slidersArr.map((slider) => (\r\n    <Input\r\n      key={slider.id}\r\n      elementType={slider.config.elementType}\r\n      inputType={slider.config.inputType}\r\n      label={slider.id}\r\n      value={slider.config.value}\r\n      disabled={animationToggler && disableControls}\r\n      min={slider.config.min}\r\n      max={slider.config.max}\r\n      step={slider.config.step}\r\n      changed={(event) => onInputChange(event, slider.id)}\r\n    />\r\n  ));\r\n\r\n  const playgroundUI = (\r\n      <section className={classes.RngValSliders}>\r\n        <h1 className={classes.PlaygroundName}>{playgroundName}</h1>\r\n        {rngSliders}\r\n        <Button\r\n          btnType=\"Success\"\r\n          clicked={onClickHandler}\r\n        >\r\n          {animationToggler ? \"Stop!\" : \"Try it!\"}\r\n        </Button>\r\n      </section>\r\n  );\r\n\r\n  return {\r\n    playgroundUI,\r\n    valRng,\r\n    animationToggler,\r\n    setAnimationToggler,\r\n    stopped,\r\n    setStopped\r\n  };\r\n};\r\n\r\nexport default usePlaygroundSliders;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RngValSliders\":\"use-playgroundSliders_RngValSliders__3wfmL\",\"PlaygroundName\":\"use-playgroundSliders_PlaygroundName__2VGYk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Playground\":\"global_Playground__2p6A0\"};","import { useRef, useReducer, useEffect } from \"react\";\r\n\r\nimport { updateObj } from \"../../usefulFunc/utility\";\r\n\r\nimport classes from \"./use-canvas.module.css\";\r\n\r\nconst INIT_STATE = {\r\n  canvas: null,\r\n  ctx: null,\r\n  size: {\r\n    height: null,\r\n    width: null,\r\n  },\r\n};\r\n\r\nconst canvasReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"INIT_CANVAS\":\r\n      return updateObj(state, {\r\n        canvas: action.value,\r\n      });\r\n\r\n    case \"INIT_CTX\":\r\n      return updateObj(state, {\r\n        ctx: action.value,\r\n      });\r\n\r\n    case \"SET_SIZE\":\r\n      return updateObj(state, {\r\n        size: {\r\n          height: action.height,\r\n          width: action.width,\r\n        },\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst useCanvas = (ready) => {\r\n  const canvasRef = useRef();\r\n\r\n  const [canvState, dispatchCanvas] = useReducer(canvasReducer, INIT_STATE);\r\n\r\n  useEffect(() => {\r\n    if (!ready) return;\r\n    dispatchCanvas({ type: \"INIT_CANVAS\", value: canvasRef.current });\r\n  }, [ready]);\r\n\r\n  useEffect(() => {\r\n    if (!canvState.canvas) return;\r\n    dispatchCanvas({ type: \"INIT_CTX\", value: canvState.canvas.getContext(\"2d\")});\r\n  }, [canvState.canvas])\r\n\r\n  const {canvas} = canvState;\r\n\r\n  useEffect(() => {\r\n    if(!canvas) return\r\n    let timeout;\r\n\r\n    const resizeHandler = () => {\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(() => {\r\n        dispatchCanvas({\r\n          type: \"SET_SIZE\",\r\n          height: canvas.getBoundingClientRect().height,\r\n          width: canvas.getBoundingClientRect().width,\r\n        });\r\n        canvas.height = canvas.getBoundingClientRect().height;\r\n        canvas.width = canvas.getBoundingClientRect().width;\r\n      }, 500);\r\n    };\r\n\r\n    resizeHandler();\r\n\r\n    window.addEventListener(\"resize\", resizeHandler);\r\n\r\n    // if (animationToggler) {\r\n    //     dispatchCanvas({\r\n    //         type: \"SET_SIZE\",\r\n    //         height: canvas.getBoundingClientRect().height,\r\n    //         width: canvas.getBoundingClientRect().width,\r\n    //       });\r\n    //   canvas.height = canvas.getBoundingClientRect().height;\r\n    //   canvas.width = canvas.getBoundingClientRect().width;\r\n    // }\r\n\r\n    return () => {\r\n      clearTimeout(timeout);\r\n      window.removeEventListener(\"resize\", resizeHandler);\r\n    };\r\n  }, [canvas]);\r\n\r\n\r\n  const canvasEl = <canvas ref={canvasRef} className={classes.Canvas} />;\r\n\r\n  return {\r\n      canvasEl,\r\n      ...canvState\r\n  };\r\n};\r\n\r\nexport default useCanvas;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Canvas\":\"use-canvas_Canvas__1jTf-\"};","import { useEffect, useLayoutEffect, useState } from \"react\";\r\n\r\nimport useCanvas from '../../../../hooks/use-canvas/use-canvas';\r\nimport usePlaygroundSliders from \"../../../../hooks/use-playground/use-playgroundSliders\";\r\n\r\nimport gClasses from '../../../../global.module.css';\r\n\r\nconst FibonacciFlower = () => {\r\n    const [ready, setReady] = useState(false);\r\n\r\n    const {canvasEl, ctx, size} = useCanvas(ready);\r\n\r\n  const { playgroundUI, valRng, animationToggler, setAnimationToggler, stopped, setStopped} = usePlaygroundSliders({\r\n    angle: {\r\n      elementType: \"input\",\r\n      inputType: \"range\",\r\n      value: \"0.5\",\r\n      min: \"0.1\",\r\n      max: \"10\",\r\n      step: \"0.1\",\r\n    },\r\n    space: {\r\n      elementType: \"input\",\r\n      inputType: \"range\",\r\n      value: \"0.5\",\r\n      min: \"0.1\",\r\n      max: \"10\",\r\n      step: \"0.1\",\r\n    },\r\n    color: {\r\n      elementType: \"input\",\r\n      inputType: \"range\",\r\n      value: \"260\",\r\n      min: \"0\",\r\n      max: \"360\",\r\n      step: \"10\",\r\n    },\r\n    radius: {\r\n      elementType: \"input\",\r\n      inputType: \"range\",\r\n      value: \"8\",\r\n      min: \"1\",\r\n      max: \"50\",\r\n      step: \"1\",\r\n    },\r\n  }, \"Fibonacci Flower\", true);\r\n\r\n\r\n\r\n  let initAngle = 2;\r\n  let initSpace = 1;\r\n\r\n  const {\r\n    color: { value: color },\r\n    angle: { value: angle },\r\n    space: { value: space },\r\n    radius: { value: radius },\r\n  } = valRng;\r\n\r\n  useEffect(() => {\r\n    setReady(true);\r\n  }, []);\r\n\r\n  function draw(col, ang, spa, rad) {\r\n    const x = size.width / 2 + Math.sin(initAngle) * initSpace;\r\n    const y = size.height / 2 + Math.cos(initAngle) * initSpace;\r\n\r\n    ctx.beginPath();\r\n    ctx.fillStyle = `hsl(${col}, 50%, 50%)`;\r\n    ctx.arc(x, y, rad, 0, Math.PI * 2);\r\n    ctx.fill();\r\n    ctx.closePath();\r\n    initAngle += +ang;\r\n    initSpace += +spa;\r\n\r\n    return { x, y };\r\n  }\r\n\r\n  const onResetAnimationHandler = () => {\r\n    setAnimationToggler(false);\r\n    ctx.clearRect(0,0,size.width, size.height);\r\n    initAngle = 2;\r\n    initSpace = 1;\r\n  }\r\n\r\n  useLayoutEffect(() => {\r\n    if(!ctx) return;\r\n    let animationFrameId = 0;\r\n\r\n    const animate = () => {\r\n\r\n      const { x, y } = draw(color, angle, space, radius);\r\n      if (\r\n        (y - radius < 0 ||\r\n          y + radius > size.height) &&\r\n        (x - radius < 0 || x + radius > size.width)\r\n      ) {\r\n        onResetAnimationHandler();\r\n        return;\r\n      }\r\n\r\n      animationFrameId = requestAnimationFrame(animate);\r\n    };\r\n\r\n    if(stopped) {\r\n        setStopped(false);\r\n        onResetAnimationHandler();\r\n        return;\r\n      }\r\n\r\n    if (animationToggler) animate();\r\n\r\n    return () => {\r\n      window.cancelAnimationFrame(animationFrameId);\r\n    };\r\n  }, [animationToggler, color, angle, space, radius]);\r\n\r\n  return (\r\n  <section className={gClasses.Playground}>\r\n      {playgroundUI}\r\n      {canvasEl}\r\n  </section>\r\n  )\r\n      \r\n  \r\n};\r\n\r\nexport default FibonacciFlower;\r\n"],"sourceRoot":""}