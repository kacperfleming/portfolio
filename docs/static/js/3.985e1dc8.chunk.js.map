{"version":3,"sources":["pages/Projects/GenerativeArt/CollidingBalls/CollidingBalls.module.css","pages/Projects/GenerativeArt/CollidingBalls/CollidingBalls.js"],"names":["module","exports","ih","iw","GetDistance","x1","y1","x2","y2","xDistance","yDistance","Math","sqrt","pow","colors","Circle","x","y","radius","min","max","velocity","random","update","circles","ctx","draw","i","length","resolveCollision","this","mass","color","floor","beginPath","arc","PI","stroke","fillStyle","fill","rotate","angle","cos","sin","particle","otherParticle","xVelocityDiff","yVelocityDiff","atan2","m1","m2","u1","u2","v1","v2","vFinal1","vFinal2","CollidingBalls","props","canv","useRef","useLayoutEffect","animationFrameId","canvas","current","getContext","resizeHandler","getBoundingClientRect","height","width","window","addEventListener","j","push","init","animate","clearRect","forEach","circle","requestAnimationFrame","cancelAnimationFrame","removeEventListener","className","classes","Canvas","ref"],"mappings":"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","file":"static/js/3.985e1dc8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Canvas\":\"CollidingBalls_Canvas__1qiIu\"};","import classes from './CollidingBalls.module.css';\r\nimport {useRef, useLayoutEffect} from 'react';\r\n\r\nlet ih;\r\nlet iw;\r\n\r\nfunction GetDistance(x1, y1, x2, y2) {\r\n    let xDistance = x2 - x1;\r\n    let yDistance = y2 - y1;\r\n\r\n    return Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));\r\n}\r\n\r\nfunction randomNumber(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nlet colors = ['#C0392B', '#2980B9', '#52BE80'];\r\n\r\nclass Circle {\r\n\r\n    velocity = {\r\n        x: (Math.random() - 0.5) * 2,\r\n        y: (Math.random() - 0.5) * 2\r\n    }\r\n\r\n    constructor(x, y, radius) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.radius = radius;\r\n        this.mass = 1;\r\n        this.color = colors[randomNumber(0, 2)];\r\n    }\r\n\r\n\r\n    draw(ctx) {\r\n        ctx.beginPath()\r\n        ctx.arc(this.x, this.y, this.radius, 0, Math.PI*2, false);\r\n        ctx.stroke();\r\n        ctx.fillStyle = this.color;\r\n        ctx.fill();\r\n    }\r\n    update = (circles, ctx) => {\r\n\r\n        this.draw(ctx);\r\n\r\n        for(let i = 0; i < circles.length; i++) {\r\n            if(this === circles[i]) continue;\r\n            if(GetDistance(this.x, this.y, circles[i].x, circles[i].y) - 2*this.radius < 0) {\r\n                resolveCollision(this, circles[i]);\r\n\r\n            }\r\n        }\r\n\r\n        if((this.x + 30 > iw) || (this.x - 30 < 0)) {\r\n            this.velocity.x = -this.velocity.x;\r\n        }\r\n        this.x += this.velocity.x;\r\n\r\n        if((this.y + 30 > ih) || (this.y - 30 < 0)) {\r\n            this.velocity.y = -this.velocity.y * 0.95;\r\n        } else {\r\n            this.velocity.y += 1;\r\n        }\r\n        this.y += this.velocity.y;\r\n\r\n    }\r\n}\r\nlet circles = [];\r\n\r\n\r\nfunction init() {\r\n    circles = [];\r\n    for(let i=0; i<10; i++) {\r\n        const radius = 30;\r\n        let x = Math.random() * iw;\r\n        let y = Math.random() * ih;\r\n        if(x<30) {\r\n            x+=30;\r\n        }\r\n        else if(x+30>iw) {\r\n            x-=30;\r\n        }\r\n\r\n        y = Math.random() * ih;\r\n        if(y<30) {\r\n            y+=30;\r\n        }\r\n        else if(y+30>ih) {\r\n            y-=30;\r\n        }\r\n        if(i!==0) {\r\n            for(let j=0; j < circles.length; j++) {\r\n\r\n                if(GetDistance(x, y, circles[j].x, circles[j].y) - 2*radius < 0) {\r\n\r\n                    x = Math.random() * iw;\r\n                    if(x<30) {\r\n                        x+=30;\r\n                    }\r\n                    else if(x+30>iw) {\r\n                        x-=30;\r\n                    }\r\n\r\n                    y = Math.random() * ih;\r\n                    if(y<30) {\r\n                        y+=30;\r\n                    }\r\n                    else if(y+30>ih) {\r\n                        y-=30;\r\n                    }\r\n\r\n                    j = -1;\r\n                }\r\n            }\r\n\r\n        }\r\n        circles.push(new Circle(x, y, radius));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction rotate(velocity, angle) {\r\n    const rotatedVelocities = {\r\n        x: velocity.x * Math.cos(angle) - velocity.y * Math.sin(angle),\r\n        y: velocity.x * Math.sin(angle) + velocity.y * Math.cos(angle)\r\n    };\r\n\r\n    return rotatedVelocities;\r\n}\r\n\r\n\r\nfunction resolveCollision(particle, otherParticle) {\r\n    const xVelocityDiff = particle.velocity.x - otherParticle.velocity.x;\r\n    const yVelocityDiff = particle.velocity.y - otherParticle.velocity.y;\r\n\r\n    const xDist = otherParticle.x - particle.x;\r\n    const yDist = otherParticle.y - particle.y;\r\n\r\n    // Prevent accidental overlap of particles\r\n    if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {\r\n\r\n        // Grab angle between the two colliding particles\r\n        const angle = -Math.atan2(otherParticle.y - particle.y, otherParticle.x - particle.x);\r\n\r\n        // Store mass in var for better readability in collision equation\r\n        const m1 = particle.mass;\r\n        const m2 = otherParticle.mass;\r\n\r\n        // Velocity before equation\r\n        const u1 = rotate(particle.velocity, angle);\r\n        const u2 = rotate(otherParticle.velocity, angle);\r\n\r\n        // Velocity after 1d collision equation\r\n        const v1 = { x: u1.x * (m1 - m2) / (m1 + m2) + u2.x * 2 * m2 / (m1 + m2), y: u1.y };\r\n        const v2 = { x: u2.x * (m1 - m2) / (m1 + m2) + u1.x * 2 * m2 / (m1 + m2), y: u2.y };\r\n\r\n        // Final velocity after rotating axis back to original location\r\n        const vFinal1 = rotate(v1, -angle);\r\n        const vFinal2 = rotate(v2, -angle);\r\n\r\n        // Swap particle velocities for realistic bounce effect\r\n        particle.velocity.x = vFinal1.x;\r\n        particle.velocity.y = vFinal1.y;\r\n\r\n        otherParticle.velocity.x = vFinal2.x;\r\n        otherParticle.velocity.y = vFinal2.y;\r\n    }\r\n}\r\n\r\nconst CollidingBalls = props => {\r\n    const canv = useRef();\r\n\r\n    useLayoutEffect(() => {\r\n        const canvas = canv.current;\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        const resizeHandler = () => {\r\n            ih = canvas.getBoundingClientRect().height;\r\n            iw = canvas.getBoundingClientRect().width;\r\n\r\n            canvas.height = ih;\r\n            canvas.width = iw;\r\n        }\r\n        resizeHandler();\r\n\r\n        window.addEventListener('resize', resizeHandler);\r\n\r\n        let animationFrameId;\r\n\r\n        function animate() {\r\n            ctx.clearRect(0, 0, iw, ih);\r\n\r\n            circles.forEach(circle => {\r\n                circle.update(circles, ctx);\r\n            });\r\n\r\n            animationFrameId = requestAnimationFrame(animate);\r\n        }\r\n        init();\r\n        animate();\r\n\r\n        return () => {\r\n            window.cancelAnimationFrame(animationFrameId);\r\n            window.removeEventListener('resize', resizeHandler);\r\n        }\r\n    }, []);\r\n    return <canvas className={classes.Canvas} ref={canv} />\r\n}\r\n\r\nexport default CollidingBalls;\r\n\r\n"],"sourceRoot":""}