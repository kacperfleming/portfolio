{"version":3,"sources":["hooks/use-playground/use-playgroundSliders.js","hooks/use-playground/use-playgroundSliders.module.css","global.module.css","hooks/use-canvas/use-canvas.js","hooks/use-canvas/use-canvas.module.css","pages/Projects/GenerativeArt/CollidingBalls/physics.js","pages/Projects/GenerativeArt/CollidingBalls/CollidingBalls.js"],"names":["valRngStateReducer","state","action","type","updateObj","id","value","val","usePlaygroundSliders","initialState","playgroundName","disableControls","useReducer","valRng","dispatchValRng","useState","animationToggler","setAnimationToggler","stopped","setStopped","slidersArr","slider","push","config","rngSliders","map","elementType","inputType","label","disabled","min","max","step","changed","event","target","onInputChange","playgroundUI","className","classes","RngValSliders","PlaygroundName","btnType","clicked","prevState","module","exports","INIT_STATE","canvas","ctx","size","height","width","canvasReducer","useCanvas","ready","canvasRef","useRef","canvState","dispatchCanvas","useEffect","current","getContext","timeout","resizeHandler","clearTimeout","setTimeout","getBoundingClientRect","window","addEventListener","removeEventListener","canvasEl","ref","Canvas","rotate","velocity","angle","x","Math","cos","y","sin","resolveCollision","particle","otherParticle","xVelocityDiff","yVelocityDiff","atan2","m1","mass","m2","u1","u2","v1","v2","vFinal1","vFinal2","GetDistance","x1","y1","x2","y2","xDistance","yDistance","sqrt","pow","colors","Circle","radius","random","update","circles","ih","iw","draw","i","length","this","color","floor","beginPath","arc","PI","stroke","fillStyle","fill","CollidingBalls","setReady","usePlayground","amount","trail","useLayoutEffect","animationFrameId","j","init","animate","fillRect","forEach","circle","requestAnimationFrame","clearRect","cancelAnimationFrame","gClasses","Playground"],"mappings":"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","file":"static/js/3.69fc8bb4.chunk.js","sourcesContent":["import { useReducer, useState } from \"react\";\r\n\r\nimport { updateObj } from \"../../usefulFunc/utility\";\r\n\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\n\r\nimport classes from \"./use-playgroundSliders.module.css\";\r\n\r\nconst valRngStateReducer = (state, action) => {\r\n  if (action.type === \"UPDATE_INPUT_VALUE\")\r\n    return updateObj(state, {\r\n      [action.id]: {\r\n        ...state[action.id],\r\n        value: action.val,\r\n      },\r\n    });\r\n  else return state;\r\n};\r\n\r\nconst usePlaygroundSliders = (initialState, playgroundName, disableControls) => {\r\n  const [valRng, dispatchValRng] = useReducer(valRngStateReducer, initialState);\r\n\r\n  const [animationToggler, setAnimationToggler] = useState(false);\r\n  \r\n  const [stopped, setStopped] = useState(false);\r\n  \r\n\r\n  const onInputChange = (event, id) =>\r\n    dispatchValRng({\r\n      type: \"UPDATE_INPUT_VALUE\",\r\n      val: event.target.value,\r\n      id: id,\r\n    });\r\n\r\n    const onClickHandler = () => {\r\n      if(animationToggler) setStopped(true);\r\n      setAnimationToggler((prevState) => !prevState);\r\n    }\r\n\r\n  const slidersArr = [];\r\n  for (let slider in valRng) {\r\n    slidersArr.push({\r\n      id: slider,\r\n      config: valRng[slider],\r\n    });\r\n  }\r\n\r\n  const rngSliders = slidersArr.map((slider) => (\r\n    <Input\r\n      key={slider.id}\r\n      elementType={slider.config.elementType}\r\n      inputType={slider.config.inputType}\r\n      label={slider.id}\r\n      value={slider.config.value}\r\n      disabled={animationToggler && disableControls}\r\n      min={slider.config.min}\r\n      max={slider.config.max}\r\n      step={slider.config.step}\r\n      changed={(event) => onInputChange(event, slider.id)}\r\n    />\r\n  ));\r\n\r\n  const playgroundUI = (\r\n      <section className={classes.RngValSliders}>\r\n        <h1 className={classes.PlaygroundName}>{playgroundName}</h1>\r\n        {rngSliders}\r\n        <Button\r\n          btnType=\"Success\"\r\n          clicked={onClickHandler}\r\n        >\r\n          {animationToggler ? \"Stop!\" : \"Try it!\"}\r\n        </Button>\r\n      </section>\r\n  );\r\n\r\n  return {\r\n    playgroundUI,\r\n    valRng,\r\n    animationToggler,\r\n    setAnimationToggler,\r\n    stopped,\r\n    setStopped\r\n  };\r\n};\r\n\r\nexport default usePlaygroundSliders;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RngValSliders\":\"use-playgroundSliders_RngValSliders__3wfmL\",\"PlaygroundName\":\"use-playgroundSliders_PlaygroundName__2VGYk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Playground\":\"global_Playground__2p6A0\"};","import { useRef, useReducer, useEffect } from \"react\";\r\n\r\nimport { updateObj } from \"../../usefulFunc/utility\";\r\n\r\nimport classes from \"./use-canvas.module.css\";\r\n\r\nconst INIT_STATE = {\r\n  canvas: null,\r\n  ctx: null,\r\n  size: {\r\n    height: null,\r\n    width: null,\r\n  },\r\n};\r\n\r\nconst canvasReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"INIT_CANVAS\":\r\n      return updateObj(state, {\r\n        canvas: action.value,\r\n      });\r\n\r\n    case \"INIT_CTX\":\r\n      return updateObj(state, {\r\n        ctx: action.value,\r\n      });\r\n\r\n    case \"SET_SIZE\":\r\n      return updateObj(state, {\r\n        size: {\r\n          height: action.height,\r\n          width: action.width,\r\n        },\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst useCanvas = (ready) => {\r\n  const canvasRef = useRef();\r\n\r\n  const [canvState, dispatchCanvas] = useReducer(canvasReducer, INIT_STATE);\r\n\r\n  useEffect(() => {\r\n    if (!ready) return;\r\n    dispatchCanvas({ type: \"INIT_CANVAS\", value: canvasRef.current });\r\n  }, [ready]);\r\n\r\n  useEffect(() => {\r\n    if (!canvState.canvas) return;\r\n    dispatchCanvas({ type: \"INIT_CTX\", value: canvState.canvas.getContext(\"2d\")});\r\n  }, [canvState.canvas])\r\n\r\n  const {canvas} = canvState;\r\n\r\n  useEffect(() => {\r\n    if(!canvas) return\r\n    let timeout;\r\n\r\n    const resizeHandler = () => {\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(() => {\r\n        dispatchCanvas({\r\n          type: \"SET_SIZE\",\r\n          height: canvas.getBoundingClientRect().height,\r\n          width: canvas.getBoundingClientRect().width,\r\n        });\r\n        canvas.height = canvas.getBoundingClientRect().height;\r\n        canvas.width = canvas.getBoundingClientRect().width;\r\n      }, 500);\r\n    };\r\n\r\n    resizeHandler();\r\n\r\n    window.addEventListener(\"resize\", resizeHandler);\r\n\r\n    // if (animationToggler) {\r\n    //     dispatchCanvas({\r\n    //         type: \"SET_SIZE\",\r\n    //         height: canvas.getBoundingClientRect().height,\r\n    //         width: canvas.getBoundingClientRect().width,\r\n    //       });\r\n    //   canvas.height = canvas.getBoundingClientRect().height;\r\n    //   canvas.width = canvas.getBoundingClientRect().width;\r\n    // }\r\n\r\n    return () => {\r\n      clearTimeout(timeout);\r\n      window.removeEventListener(\"resize\", resizeHandler);\r\n    };\r\n  }, [canvas]);\r\n\r\n\r\n  const canvasEl = <canvas ref={canvasRef} className={classes.Canvas} />;\r\n\r\n  return {\r\n      canvasEl,\r\n      ...canvState\r\n  };\r\n};\r\n\r\nexport default useCanvas;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Canvas\":\"use-canvas_Canvas__1jTf-\"};","function rotate(velocity, angle) {\r\n    const rotatedVelocities = {\r\n        x: velocity.x * Math.cos(angle) - velocity.y * Math.sin(angle),\r\n        y: velocity.x * Math.sin(angle) + velocity.y * Math.cos(angle)\r\n    };\r\n\r\n    return rotatedVelocities;\r\n}\r\n\r\n\r\nexport default function resolveCollision(particle, otherParticle) {\r\n    const xVelocityDiff = particle.velocity.x - otherParticle.velocity.x;\r\n    const yVelocityDiff = particle.velocity.y - otherParticle.velocity.y;\r\n\r\n    const xDist = otherParticle.x - particle.x;\r\n    const yDist = otherParticle.y - particle.y;\r\n\r\n    // Prevent accidental overlap of particles\r\n    if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {\r\n\r\n        // Grab angle between the two colliding particles\r\n        const angle = -Math.atan2(otherParticle.y - particle.y, otherParticle.x - particle.x);\r\n\r\n        // Store mass in var for better readability in collision equation\r\n        const m1 = particle.mass;\r\n        const m2 = otherParticle.mass;\r\n\r\n        // Velocity before equation\r\n        const u1 = rotate(particle.velocity, angle);\r\n        const u2 = rotate(otherParticle.velocity, angle);\r\n\r\n        // Velocity after 1d collision equation\r\n        const v1 = { x: u1.x * (m1 - m2) / (m1 + m2) + u2.x * 2 * m2 / (m1 + m2), y: u1.y };\r\n        const v2 = { x: u2.x * (m1 - m2) / (m1 + m2) + u1.x * 2 * m2 / (m1 + m2), y: u2.y };\r\n\r\n        // Final velocity after rotating axis back to original location\r\n        const vFinal1 = rotate(v1, -angle);\r\n        const vFinal2 = rotate(v2, -angle);\r\n\r\n        // Swap particle velocities for realistic bounce effect\r\n        particle.velocity.x = vFinal1.x;\r\n        particle.velocity.y = vFinal1.y;\r\n\r\n        otherParticle.velocity.x = vFinal2.x;\r\n        otherParticle.velocity.y = vFinal2.y;\r\n    }\r\n}","import { useEffect, useLayoutEffect, useState } from \"react\";\r\n\r\nimport resolveCollision from './physics';\r\nimport useCanvas from '../../../../hooks/use-canvas/use-canvas';\r\nimport usePlayground from \"../../../../hooks/use-playground/use-playgroundSliders\";\r\n\r\nimport gClasses from '../../../../global.module.css';\r\n\r\n\r\n\r\nfunction GetDistance(x1, y1, x2, y2) {\r\n    let xDistance = x2 - x1;\r\n    let yDistance = y2 - y1;\r\n\r\n    return Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));\r\n}\r\n\r\nfunction randomNumber(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nlet colors = ['#C0392B', '#2980B9', '#52BE80'];\r\n\r\nclass Circle {\r\n\r\n    velocity = {\r\n        x: (Math.random() - 0.5) * 2,\r\n        y: (Math.random() - 0.5) * 2\r\n    }\r\n\r\n    constructor(x, y, radius, mass) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.radius = radius;\r\n        this.mass = mass;\r\n        this.color = colors[randomNumber(0, 2)];\r\n    }\r\n\r\n\r\n    draw(ctx) {\r\n        ctx.beginPath()\r\n        ctx.arc(this.x, this.y, this.radius, 0, Math.PI*2, false);\r\n        ctx.stroke();\r\n        ctx.fillStyle = this.color;\r\n        ctx.fill();\r\n    }\r\n    update = (circles, ctx, ih, iw) => {\r\n\r\n        this.draw(ctx);\r\n\r\n        for(let i = 0; i < circles.length; i++) {\r\n            if(this === circles[i]) continue;\r\n            if(GetDistance(this.x, this.y, circles[i].x, circles[i].y) - 2*this.radius < 0) {\r\n                resolveCollision(this, circles[i]);\r\n\r\n            }\r\n        }\r\n\r\n        if((this.x + 30 > iw) || (this.x - 30 < 0)) {\r\n            this.velocity.x = -this.velocity.x;\r\n        }\r\n        this.x += this.velocity.x;\r\n\r\n        if((this.y + 30 > ih) || (this.y - 30 < 0)) {\r\n            this.velocity.y = -this.velocity.y * 0.95;\r\n        } else {\r\n            this.velocity.y += 1;\r\n        }\r\n        this.y += this.velocity.y;\r\n\r\n    }\r\n}\r\nlet circles = [];\r\n\r\n\r\nfunction init(ih, iw, amount, radius, mass) {\r\n    circles = [];\r\n    for(let i=0; i<amount; i++) {\r\n        let x = Math.random() * iw;\r\n        let y = Math.random() * ih;\r\n        if(x<30) {\r\n            x+=30;\r\n        }\r\n        else if(x+30>iw) {\r\n            x-=30;\r\n        }\r\n\r\n        y = Math.random() * ih;\r\n        if(y<30) {\r\n            y+=30;\r\n        }\r\n        else if(y+30>ih) {\r\n            y-=30;\r\n        }\r\n        if(i!==0) {\r\n            for(let j=0; j < circles.length; j++) {\r\n\r\n                if(GetDistance(x, y, circles[j].x, circles[j].y) - 2*radius < 0) {\r\n\r\n                    x = Math.random() * iw;\r\n                    if(x<30) {\r\n                        x+=30;\r\n                    }\r\n                    else if(x+30>iw) {\r\n                        x-=30;\r\n                    }\r\n\r\n                    y = Math.random() * ih;\r\n                    if(y<30) {\r\n                        y+=30;\r\n                    }\r\n                    else if(y+30>ih) {\r\n                        y-=30;\r\n                    }\r\n\r\n                    j = -1;\r\n                }\r\n            }\r\n\r\n        }\r\n        circles.push(new Circle(x, y, radius, mass));\r\n    }\r\n}\r\n\r\nconst CollidingBalls = () => {\r\n    const [ready, setReady] = useState(false);\r\n\r\n    const {canvasEl, ctx, size} = useCanvas(ready);\r\n\r\n  const { playgroundUI, valRng, animationToggler, setAnimationToggler, stopped, setStopped} = usePlayground({\r\n    amount: {\r\n        elementType: \"input\",\r\n        inputType: \"range\",\r\n        value: \"10\",\r\n        min: \"2\",\r\n        max: \"30\",\r\n        step: \"1\",\r\n      },\r\n    radius: {\r\n        elementType: \"input\",\r\n        inputType: \"range\",\r\n        value: \"30\",\r\n        min: \"10\",\r\n        max: \"50\",\r\n        step: \"1\",\r\n      },\r\n    mass: {\r\n      elementType: \"input\",\r\n      inputType: \"range\",\r\n      value: \"1\",\r\n      min: \"0.1\",\r\n      max: \"100\",\r\n      step: \"0.1\",\r\n    },\r\n    trail: {\r\n        elementType: \"input\",\r\n        inputType: \"range\",\r\n        value: \"0.75\",\r\n        min: \"0\",\r\n        max: \"0.99\",\r\n        step: \"0.01\",\r\n      },\r\n  }, \"Colliding Balls\", true);\r\n\r\n  useEffect(() => {\r\n    setReady(true);\r\n  }, []);\r\n\r\n    const {amount: {value: amount}, radius: {value: radius}, mass: {value: mass}, trail: {value: trail}} = valRng\r\n\r\n    const onResetAnimationHandler = () => {\r\n        setAnimationToggler(false);\r\n        ctx.clearRect(0, 0, size.width, size.height);\r\n    }\r\n\r\n    useLayoutEffect(() => {\r\n        \r\n        let animationFrameId;\r\n\r\n        function animate() {\r\n            ctx.fillStyle = `rgba(0,0,0,${1 - trail})`;\r\n            ctx.fillRect(0, 0, size.width, size.height);\r\n            \r\n            circles.forEach(circle => {\r\n                circle.update(circles, ctx, size.height, size.width);\r\n            });\r\n\r\n            animationFrameId = requestAnimationFrame(animate);\r\n        }\r\n\r\n        if(animationToggler) {\r\n            init(size.height, size.width, +amount, +radius, +mass);\r\n            animate();\r\n        } \r\n\r\n        if(stopped) {\r\n            setStopped(false);\r\n            onResetAnimationHandler();\r\n            return;\r\n        }\r\n        \r\n\r\n        return () => {\r\n            window.cancelAnimationFrame(animationFrameId);\r\n        }\r\n    }, [animationToggler, ctx, mass]);\r\n    return (\r\n        <section className={gClasses.Playground}>\r\n            {playgroundUI}\r\n            {canvasEl}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default CollidingBalls;\r\n\r\n"],"sourceRoot":""}